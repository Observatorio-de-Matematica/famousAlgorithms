/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 22.04.0 ] */
/* [wxMaxima: input   start ] */
wxplot_size:[600,400];
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
load(fft);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
load(descriptive);

/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
pi2:2.0*float(%pi); /* 2 Pi */
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
n:2048; /* size of fft arrays, must be power of 2 */
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
sf:1.0/n; /* step factor for signal generation */
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
cf:500; /* carrier frequency */
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
mf:40; /* modulation frequency */
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
hf:4; /* harmonic comparison frequency */     
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* signal generator function */
/*
	t = time seconds
	cf = carrier frequency
	mf = modulation frequency
	sf = step factor for FFT array scaling
	nl = noise level
*/
fcm(t,cf,mf,sf,nl) := (
    r:(random(2.0)-1.0)*nl,
    cos(pi2*cf*sf*t) * (1+r+cos(pi2*mf*sf*t))
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* plot the time domain signal */

fpt() := (
	wxplot2d(fcm(i,cf,mf,sf,0),[i,0,256],
	[gnuplot_preamble,
	"unset key;set xlabel 'Time';set ylabel 'Amplitude';set title 'Amplitude Modulation -- Time Domain';"])
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* FFT setup function */
fft_setup() := (
	array(ra,float,n-1), /* real value array */
	array(ia,float,n-1) /* imaginary value array */
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fft_perform() := (
	/* perform FFT */
	fft(ra,ia),
	
	/* convert FFT values from a+bi form to polar magnitude and angle */
	recttopolar(ra,ia),
	
	/* make a data list from the first half of the magnitude array */
	lira:makelist(ra[i],i,0,(n/2))
); /* FFT perform and plot */


/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fft_plot() := (
	xIndexList:makelist(i,i,0,length(lira)),
	wxplot2d([discrete, xIndexList,lira],
	[gnuplot_preamble,
	"unset key;set xrange [0:1024];set xlabel 'Frequency';set ylabel 'Amplitude';set title 'Amplitude Modulation -- Frequency Domain';"])
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* plot the frequency domain signal */

fpf() := (
	fft_setup(),

	/* fill the FFT data arrays */
	for i:0 thru n-1 do (
		ra[i]:fcm(i,cf,mf,sf,2),
		ia[i]:0.0
	),

	fft_perform(),
	fft_plot()
);

/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* *** waveform generators and display routines *** */

/*
	each of the generator functions
	takes these arguments:
	
	t = time, seconds
	f = frequency, Hertz
	m = number of sums to perform
*/

/* summation square wave generator */

fsq(t,f,m) := (
	(4/%pi) * sum(
	(d:2*n-1,
	sin(2*%pi*f*t*d)/d),
	n,1,m)
);

/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* summation triangle wave generator */

ftri(t,f,m) := (
	(8/%pi^2) * sum(
	(d:2*n-1,
	q:(-1)^(n+1)/d^2,
	sin(2*%pi*f*t*d)*q),
	n,1,m)
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* summation sawtooth wave generator */

fsaw(t,f,m) := (
	(2/%pi) * sum(
	sin(2*%pi*f*t*n)/n,
	n,1,m)
);

/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* summation rectified sine wave generator */

frec(t,f,m) := (
	(2/%pi) + (4/%pi) * sum(
	(
	q:((-1)^(n+1))/(4*n^2-1),
	cos(2*%pi*f*t*2*n)*q),
	n,1,m)
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* generic single plot function */

fpq(m,fn) := (
	if(is(m <= 0)) then
		print("Error: argument must be positive.")
	else
		wxplot2d(fn(t,10,m),[t,0,0.2])
);

/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* specific single plot functions, m = total sums */

fpsq(m) := fpq(m,fsq);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fptri(m) := fpq(m,ftri);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fpsaw(m) := fpq(m,fsaw);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fprec(m) := fpq(m,frec);

/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* generic multiple-plot function */

fgenmult(m,fn) := (
	if(is(m <= 0)) then
		print("Error: argument must be positive.")
	else
		(tl:makelist(fn(t,4,i),i,1,m),
		wxplot2d(tl,[t,0,.25],
		[gnuplot_preamble, "unset key;"]))
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* specific multiple-plot functions, m = number of multiples */

fsqmult(m) := fgenmult(m,fsq);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
ftrimult(m) := fgenmult(m,ftri);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fsawmult(m) := fgenmult(m,fsaw);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
frecmult(m) := fgenmult(m,frec);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
** harmonic comparison routines *** */

/* logical square wave generator (can't be plotted) */

flsq(t,f) := (
	v:cos(2*%pi*f*t),
	if(is(v<0)) then -1 else 1
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
fancy_print(i,y) := (
	if(is(y > .08))
	then
		print(printf(false,"~4d",i), " = ",printf(false,"~8,4f",y))
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* predict square wave harmonic amplitudes */

fph() := (
for n:1 thru 24 do (
	d:2*n-1,
	x:hf*d,
	y:float((4/%pi)/d),
	fancy_print(x,y)
)
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* create, convert, then print square wave harmonics */

fch() := (
	fft_setup(),
	for i:0 thru n-1 do (
		ra[i]:flsq(i*sf,hf),
		ia[i]:0.0
	),
	fft_perform(),
	for n:1 thru length(lira)-1 do (
		y:lira[n]*2,
		fancy_print(n-1,y)
	)
);
/* [wxMaxima: input   end   ] */


/* [wxMaxima: comment start ]
source: https://arachnoid.com/maxima/fourier_analysis.html
   [wxMaxima: comment end   ] */


/* [wxMaxima: input   start ] */
fpt();

/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 22.04.0"$
